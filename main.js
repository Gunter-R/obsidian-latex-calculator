/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LatexSympyCalculatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var child = __toESM(require("child_process"));
var http = __toESM(require("http"));
var path = __toESM(require("path"));
var LatexSympyCalculatorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.pythonServer = await child.spawn("python3", [this.getServerPath()]);
    this.addCommand({
      id: "replace",
      name: "Replace",
      hotkeys: [
        {
          key: "R",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.Latex)
    });
    this.addCommand({
      id: "equals",
      name: "Equals",
      hotkeys: [
        {
          key: "E",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.Latex, false)
    });
    this.addCommand({
      id: "factor",
      name: "Factor",
      hotkeys: [
        {
          key: "F",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.Factor)
    });
    this.addCommand({
      id: "numerical",
      name: "Numerical",
      hotkeys: [
        {
          key: "N",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.Numerical)
    });
    this.addCommand({
      id: "expand",
      name: "Expand",
      hotkeys: [
        {
          key: "X",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.Expand)
    });
    this.addCommand({
      id: "matrix-raw-echelon-form",
      name: "Matrix raw echelon form",
      hotkeys: [
        {
          key: "T",
          modifiers: ["Ctrl", "Shift", "Alt"]
        }
      ],
      editorCallback: this.calculatorFactory(ServerOption.MatrixRawEchelonForm)
    });
  }
  onunload() {
    this.pythonServer.kill("SIGINT");
  }
  calculatorFactory(option, replace = true) {
    return (editor, view) => {
      post(
        editor.getSelection(),
        option,
        (data) => {
          editor.replaceSelection((replace ? "" : editor.getSelection() + " = ") + data);
        },
        (err) => new import_obsidian.Notice(err)
      );
    };
  }
  getServerPath() {
    const adapter = app.vault.adapter;
    if (adapter instanceof import_obsidian.FileSystemAdapter) {
      return path.join(
        adapter.getBasePath(),
        ".obsidian",
        "plugins",
        "obsidian-latex-calculator",
        "sympy-server.py"
      );
    }
    return "";
  }
};
var ServerOption = /* @__PURE__ */ ((ServerOption2) => {
  ServerOption2["Latex"] = "/latex";
  ServerOption2["MatrixRawEchelonForm"] = "/matrix-raw-echelon-form";
  ServerOption2["Factor"] = "/factor";
  ServerOption2["Numerical"] = "/numerical";
  ServerOption2["Expand"] = "/expand";
  return ServerOption2;
})(ServerOption || {});
function post(data, path2, onSuccess, onError) {
  const _data = JSON.stringify({ data });
  const options = {
    hostname: "127.0.0.1",
    port: 7395,
    path: path2,
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": _data.length
    }
  };
  const req = http.request(options, (res) => {
    res.on("data", (data2) => {
      const result = JSON.parse(data2);
      if (result.error) {
        onError(result.error);
      } else {
        onSuccess(result.data);
      }
    });
  });
  req.on("error", () => {
    console.log("Activating the server...\nPlease retry for a moment.");
  });
  req.write(_data);
  req.end();
}
//# sourceMappingURL=data:application/json;base64,
